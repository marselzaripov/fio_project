import type { Chain, Connector } from '@wagmi/core';
import { disconnect, getAccount, watchAccount } from '@wagmi/core';
import type { ConnectorId } from './types';
export declare class EthereumClient {
    private readonly wagmi;
    readonly chains: Chain[];
    constructor(wagmi: any, chains: Chain[]);
    private getDefaultConnectorChainId;
    getConnectorById(id: ConnectorId): Connector<any, any, any>;
    getActiveWalletConnectUri(): Promise<any>;
    connectWalletConnect(onUri: (uri: string) => void, selectedChainId?: number): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core/dist/index-bacc1c49").P>>;
    connectCoinbaseMobile(onUri?: (uri: string) => void, selectedChainId?: number): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core/dist/index-bacc1c49").P>>;
    connectExtension(connectorId: ConnectorId, selectedChainId?: number): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core/dist/index-bacc1c49").P>>;
    disconnect: typeof disconnect;
    getAccount: typeof getAccount;
    watchAccount: typeof watchAccount;
}
