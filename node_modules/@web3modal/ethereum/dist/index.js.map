{"version":3,"file":"index.js","sources":["../src/client.ts","../src/utils.ts"],"sourcesContent":["import type { Chain, Client, Connector } from '@wagmi/core'\nimport { connect, disconnect, getAccount, watchAccount } from '@wagmi/core'\nimport type { ConnectorId } from './types'\n\nexport class EthereumClient {\n  private readonly wagmi = {} as Client\n  public readonly chains = [] as Chain[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(wagmi: any, chains: Chain[]) {\n    this.wagmi = wagmi\n    this.chains = chains\n  }\n\n  // -- private\n  private getDefaultConnectorChainId(connector: Connector) {\n    return connector.chains[0].id\n  }\n\n  // -- public web3modal\n  public getConnectorById(id: ConnectorId) {\n    const connector = this.wagmi.connectors.find(item => item.id === id)\n    if (!connector) throw new Error(`Missing ${id} connector`)\n\n    return connector\n  }\n\n  public async getActiveWalletConnectUri() {\n    const connector = this.getConnectorById('walletConnect')\n    const provider = await connector.getProvider()\n\n    return provider.connector.uri\n  }\n\n  public async connectWalletConnect(onUri: (uri: string) => void, selectedChainId?: number) {\n    const connector = this.getConnectorById('walletConnect')\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri(provider.connector.uri)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  }\n\n  public async connectCoinbaseMobile(onUri?: (uri: string) => void, selectedChainId?: number) {\n    const connector = this.getConnectorById('coinbaseWallet')\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri?.(provider.qrUrl)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  }\n\n  public async connectExtension(connectorId: ConnectorId, selectedChainId?: number) {\n    const connector = this.getConnectorById(connectorId)\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  }\n\n  // -- public wagmi\n  public disconnect = disconnect\n\n  public getAccount = getAccount\n\n  public watchAccount = watchAccount\n}\n","import { InjectedConnector } from '@wagmi/core'\nimport { CoinbaseWalletConnector } from '@wagmi/core/connectors/coinbaseWallet'\nimport { MetaMaskConnector } from '@wagmi/core/connectors/metaMask'\nimport { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport type { ModalConnectorsOpts, WalletConnectProviderOpts } from './types'\n\n// -- constants ------------------------------------------------------- //\nconst NAMESPACE = 'eip155'\n\n// -- providers ------------------------------------------------------- //\nexport function walletConnectProvider({ projectId }: WalletConnectProviderOpts) {\n  return jsonRpcProvider({\n    rpc: rpcChain => ({\n      http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${rpcChain.id}&projectId=${projectId}`\n    })\n  })\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function modalConnectors({ appName, chains }: ModalConnectorsOpts) {\n  return [\n    new WalletConnectConnector({ chains, options: { qrcode: false } }),\n    new InjectedConnector({ chains, options: { shimDisconnect: true } }),\n    new CoinbaseWalletConnector({ chains, options: { appName, headlessMode: true } }),\n    new MetaMaskConnector({\n      chains,\n      options: {\n        shimDisconnect: true,\n        shimChainChangedDisconnect: false,\n        UNSTABLE_shimOnConnectSelectAccount: true\n      }\n    })\n  ]\n}\n"],"names":["EthereumClient","wagmi","chains","disconnect","getAccount","watchAccount","connector","id","item","onUri","selectedChainId","chainId","getProviderUri","resolve","type","provider","data","connect","connectorId","NAMESPACE","walletConnectProvider","projectId","jsonRpcProvider","rpcChain","modalConnectors","appName","WalletConnectConnector","InjectedConnector","CoinbaseWalletConnector","MetaMaskConnector"],"mappings":"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"}