{
  "version": 3,
  "sources": ["../../@wagmi/core/dist/connectors/coinbaseWallet.js", "../../@wagmi/core/dist/connectors/metaMask.js", "../../@wagmi/core/dist/connectors/walletConnect.js", "../../@wagmi/core/dist/providers/jsonRpc.js", "../../@web3modal/ethereum/src/client.ts", "../../@web3modal/ethereum/src/utils.ts"],
  "sourcesContent": ["import {\n  AddChainError,\n  ChainNotConfiguredError,\n  Connector,\n  SwitchChainError,\n  UserRejectedRequestError,\n  normalizeChainId\n} from \"../chunk-FJTAQ7YO.js\";\nimport \"../chunk-4DNFSL2K.js\";\nimport {\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../chunk-MQXBDTVK.js\";\n\n// src/connectors/coinbaseWallet.ts\nimport { providers } from \"ethers\";\nimport { getAddress, hexValue } from \"ethers/lib/utils.js\";\nvar _client, _provider, _isUserRejectedRequestError, isUserRejectedRequestError_fn;\nvar CoinbaseWalletConnector = class extends Connector {\n  constructor({ chains, options }) {\n    super({\n      chains,\n      options: {\n        reloadOnDisconnect: false,\n        ...options\n      }\n    });\n    __privateAdd(this, _isUserRejectedRequestError);\n    this.id = \"coinbaseWallet\";\n    this.name = \"Coinbase Wallet\";\n    this.ready = true;\n    __privateAdd(this, _client, void 0);\n    __privateAdd(this, _provider, void 0);\n    this.onAccountsChanged = (accounts) => {\n      if (accounts.length === 0)\n        this.emit(\"disconnect\");\n      else\n        this.emit(\"change\", { account: getAddress(accounts[0]) });\n    };\n    this.onChainChanged = (chainId) => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", { chain: { id, unsupported } });\n    };\n    this.onDisconnect = () => {\n      this.emit(\"disconnect\");\n    };\n  }\n  async connect({ chainId } = {}) {\n    try {\n      const provider = await this.getProvider();\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n      this.emit(\"message\", { type: \"connecting\" });\n      const accounts = await provider.enable();\n      const account = getAddress(accounts[0]);\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      return {\n        account,\n        chain: { id, unsupported },\n        provider: new providers.Web3Provider(\n          provider\n        )\n      };\n    } catch (error) {\n      if (/(user closed modal|accounts received is empty)/i.test(\n        error.message\n      ))\n        throw new UserRejectedRequestError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    if (!__privateGet(this, _provider))\n      return;\n    const provider = await this.getProvider();\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    provider.disconnect();\n    provider.close();\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    const chainId = normalizeChainId(provider.chainId);\n    return chainId;\n  }\n  async getProvider() {\n    if (!__privateGet(this, _provider)) {\n      let CoinbaseWalletSDK = (await import(\"@coinbase/wallet-sdk\")).default;\n      if (typeof CoinbaseWalletSDK !== \"function\" && typeof CoinbaseWalletSDK.default === \"function\")\n        CoinbaseWalletSDK = CoinbaseWalletSDK.default;\n      __privateSet(this, _client, new CoinbaseWalletSDK(this.options));\n      class WalletProvider {\n      }\n      class Client {\n      }\n      const walletExtensionChainId = __privateGet(this, _client).walletExtension?.getChainId();\n      const chain = this.chains.find(\n        (chain2) => this.options.chainId ? chain2.id === this.options.chainId : chain2.id === walletExtensionChainId\n      ) || this.chains[0];\n      const chainId = this.options.chainId || chain?.id;\n      const jsonRpcUrl = this.options.jsonRpcUrl || chain?.rpcUrls.default;\n      __privateSet(this, _provider, __privateGet(this, _client).makeWeb3Provider(jsonRpcUrl, chainId));\n    }\n    return __privateGet(this, _provider);\n  }\n  async getSigner({ chainId } = {}) {\n    const [provider, account] = await Promise.all([\n      this.getProvider(),\n      this.getAccount()\n    ]);\n    return new providers.Web3Provider(\n      provider,\n      chainId\n    ).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const id = hexValue(chainId);\n    try {\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: id }]\n      });\n      return this.chains.find((x) => x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${id}`,\n        network: `${id}`,\n        rpcUrls: { default: \"\" }\n      };\n    } catch (error) {\n      const chain = this.chains.find((x) => x.id === chainId);\n      if (!chain)\n        throw new ChainNotConfiguredError({ chainId, connectorId: this.id });\n      if (error.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: id,\n                chainName: chain.name,\n                nativeCurrency: chain.nativeCurrency,\n                rpcUrls: [chain.rpcUrls.public ?? chain.rpcUrls.default],\n                blockExplorerUrls: this.getBlockExplorerUrls(chain)\n              }\n            ]\n          });\n          return chain;\n        } catch (addError) {\n          if (__privateMethod(this, _isUserRejectedRequestError, isUserRejectedRequestError_fn).call(this, addError))\n            throw new UserRejectedRequestError(addError);\n          throw new AddChainError();\n        }\n      }\n      if (__privateMethod(this, _isUserRejectedRequestError, isUserRejectedRequestError_fn).call(this, error))\n        throw new UserRejectedRequestError(error);\n      throw new SwitchChainError(error);\n    }\n  }\n  async watchAsset({\n    address,\n    decimals = 18,\n    image,\n    symbol\n  }) {\n    const provider = await this.getProvider();\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n};\n_client = new WeakMap();\n_provider = new WeakMap();\n_isUserRejectedRequestError = new WeakSet();\nisUserRejectedRequestError_fn = function(error) {\n  return /(user rejected)/i.test(error.message);\n};\nexport {\n  CoinbaseWalletConnector\n};\n", "import {\n  ConnectorNotFoundError,\n  InjectedConnector,\n  ResourceUnavailableError,\n  UserRejectedRequestError,\n  getClient\n} from \"../chunk-FJTAQ7YO.js\";\nimport \"../chunk-4DNFSL2K.js\";\nimport {\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../chunk-MQXBDTVK.js\";\n\n// src/connectors/metaMask.ts\nvar _provider, _UNSTABLE_shimOnConnectSelectAccount, _getReady, getReady_fn, _findProvider, findProvider_fn;\nvar MetaMaskConnector = class extends InjectedConnector {\n  constructor({\n    chains,\n    options: options_\n  } = {}) {\n    const options = {\n      name: \"MetaMask\",\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      ...options_\n    };\n    super({ chains, options });\n    __privateAdd(this, _getReady);\n    __privateAdd(this, _findProvider);\n    this.id = \"metaMask\";\n    this.ready = typeof window != \"undefined\" && !!__privateMethod(this, _findProvider, findProvider_fn).call(this, window.ethereum);\n    __privateAdd(this, _provider, void 0);\n    __privateAdd(this, _UNSTABLE_shimOnConnectSelectAccount, void 0);\n    __privateSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\n  }\n  async connect({ chainId } = {}) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider)\n        throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", { type: \"connecting\" });\n      if (__privateGet(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !getClient().storage?.getItem(this.shimDisconnectKey)) {\n        const accounts = await provider.request({\n          method: \"eth_accounts\"\n        }).catch(() => []);\n        const isConnected = !!accounts[0];\n        if (isConnected)\n          await provider.request({\n            method: \"wallet_requestPermissions\",\n            params: [{ eth_accounts: {} }]\n          });\n      }\n      const account = await this.getAccount();\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options?.shimDisconnect)\n        getClient().storage?.setItem(this.shimDisconnectKey, true);\n      return { account, chain: { id, unsupported }, provider };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error))\n        throw new UserRejectedRequestError(error);\n      if (error.code === -32002)\n        throw new ResourceUnavailableError(error);\n      throw error;\n    }\n  }\n  async getProvider() {\n    if (typeof window !== \"undefined\") {\n      __privateSet(this, _provider, __privateMethod(this, _findProvider, findProvider_fn).call(this, window.ethereum));\n    }\n    return __privateGet(this, _provider);\n  }\n};\n_provider = new WeakMap();\n_UNSTABLE_shimOnConnectSelectAccount = new WeakMap();\n_getReady = new WeakSet();\ngetReady_fn = function(ethereum) {\n  const isMetaMask = !!ethereum?.isMetaMask;\n  if (!isMetaMask)\n    return;\n  if (ethereum.isBraveWallet && !ethereum._events && !ethereum._state)\n    return;\n  if (ethereum.isAvalanche)\n    return;\n  if (ethereum.isKuCoinWallet)\n    return;\n  if (ethereum.isPortal)\n    return;\n  if (ethereum.isTokenPocket)\n    return;\n  if (ethereum.isTokenary)\n    return;\n  return ethereum;\n};\n_findProvider = new WeakSet();\nfindProvider_fn = function(ethereum) {\n  if (ethereum?.providers)\n    return ethereum.providers.find(__privateMethod(this, _getReady, getReady_fn));\n  return __privateMethod(this, _getReady, getReady_fn).call(this, ethereum);\n};\nexport {\n  MetaMaskConnector\n};\n", "import {\n  Connector,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getClient,\n  normalizeChainId\n} from \"../chunk-FJTAQ7YO.js\";\nimport \"../chunk-4DNFSL2K.js\";\nimport {\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"../chunk-MQXBDTVK.js\";\n\n// src/connectors/walletConnect.ts\nimport { providers } from \"ethers\";\nimport { getAddress, hexValue } from \"ethers/lib/utils.js\";\nvar switchChainAllowedRegex = /(imtoken|metamask|rainbow|trust wallet)/i;\nvar _provider, _switchChain, switchChain_fn;\nvar WalletConnectConnector = class extends Connector {\n  constructor(config) {\n    super(config);\n    __privateAdd(this, _switchChain);\n    this.id = \"walletConnect\";\n    this.name = \"WalletConnect\";\n    this.ready = true;\n    __privateAdd(this, _provider, void 0);\n    this.onAccountsChanged = (accounts) => {\n      if (accounts.length === 0)\n        this.emit(\"disconnect\");\n      else\n        this.emit(\"change\", { account: getAddress(accounts[0]) });\n    };\n    this.onChainChanged = (chainId) => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", { chain: { id, unsupported } });\n    };\n    this.onDisconnect = () => {\n      this.emit(\"disconnect\");\n    };\n  }\n  async connect({ chainId } = {}) {\n    try {\n      let targetChainId = chainId;\n      if (!targetChainId) {\n        const lastUsedChainId = getClient().lastUsedChainId;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId))\n          targetChainId = lastUsedChainId;\n      }\n      const provider = await this.getProvider({\n        chainId: targetChainId,\n        create: true\n      });\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n      setTimeout(() => this.emit(\"message\", { type: \"connecting\" }), 0);\n      const accounts = await provider.enable();\n      const account = getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      const walletName = provider.connector?.peerMeta?.name ?? \"\";\n      if (switchChainAllowedRegex.test(walletName))\n        this.switchChain = __privateMethod(this, _switchChain, switchChain_fn);\n      return {\n        account,\n        chain: { id, unsupported },\n        provider: new providers.Web3Provider(\n          provider\n        )\n      };\n    } catch (error) {\n      if (/user closed modal/i.test(error.message))\n        throw new UserRejectedRequestError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    await provider.disconnect();\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    typeof localStorage !== \"undefined\" && localStorage.removeItem(\"walletconnect\");\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    const accounts = provider.accounts;\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    const chainId = normalizeChainId(provider.chainId);\n    return chainId;\n  }\n  async getProvider({\n    chainId,\n    create\n  } = {}) {\n    if (!__privateGet(this, _provider) || chainId || create) {\n      const rpc = !this.options?.infuraId ? this.chains.reduce(\n        (rpc2, chain) => ({ ...rpc2, [chain.id]: chain.rpcUrls.default }),\n        {}\n      ) : {};\n      const WalletConnectProvider = (await import(\"@walletconnect/ethereum-provider\")).default;\n      __privateSet(this, _provider, new WalletConnectProvider({\n        ...this.options,\n        chainId,\n        rpc: { ...rpc, ...this.options?.rpc }\n      }));\n    }\n    return __privateGet(this, _provider);\n  }\n  async getSigner({ chainId } = {}) {\n    const [provider, account] = await Promise.all([\n      this.getProvider({ chainId }),\n      this.getAccount()\n    ]);\n    return new providers.Web3Provider(\n      provider,\n      chainId\n    ).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n};\n_provider = new WeakMap();\n_switchChain = new WeakSet();\nswitchChain_fn = async function(chainId) {\n  const provider = await this.getProvider();\n  const id = hexValue(chainId);\n  try {\n    await provider.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: id }]\n    });\n    return this.chains.find((x) => x.id === chainId) ?? {\n      id: chainId,\n      name: `Chain ${id}`,\n      network: `${id}`,\n      rpcUrls: { default: \"\" }\n    };\n  } catch (error) {\n    const message = typeof error === \"string\" ? error : error?.message;\n    if (/user rejected request/i.test(message))\n      throw new UserRejectedRequestError(error);\n    throw new SwitchChainError(error);\n  }\n};\nexport {\n  WalletConnectConnector\n};\n", "import \"../chunk-MQXBDTVK.js\";\n\n// src/providers/jsonRpc.ts\nimport { providers } from \"ethers\";\nfunction jsonRpcProvider({\n  priority,\n  rpc,\n  stallTimeout,\n  static: static_ = true,\n  weight\n}) {\n  return function(chain) {\n    const rpcConfig = rpc(chain);\n    if (!rpcConfig || rpcConfig.http === \"\")\n      return null;\n    return {\n      chain: {\n        ...chain,\n        rpcUrls: {\n          ...chain.rpcUrls,\n          default: rpcConfig.http\n        }\n      },\n      provider: () => {\n        const RpcProvider = static_ ? providers.StaticJsonRpcProvider : providers.JsonRpcProvider;\n        const provider = new RpcProvider(rpcConfig.http, {\n          ensAddress: chain.ens?.address,\n          chainId: chain.id,\n          name: chain.network\n        });\n        return Object.assign(provider, { priority, stallTimeout, weight });\n      },\n      ...rpcConfig.webSocket && {\n        webSocketProvider: () => new providers.WebSocketProvider(\n          rpcConfig.webSocket,\n          chain.id\n        )\n      }\n    };\n  };\n}\nexport {\n  jsonRpcProvider\n};\n", "import type { Chain, Client, Connector } from '@wagmi/core'\nimport { connect, disconnect, getAccount, watchAccount } from '@wagmi/core'\nimport type { ConnectorId } from './types'\n\nexport class EthereumClient {\n  private readonly wagmi = {} as Client\n  public readonly chains = [] as Chain[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(wagmi: any, chains: Chain[]) {\n    this.wagmi = wagmi\n    this.chains = chains\n  }\n\n  // -- private\n  private getDefaultConnectorChainId(connector: Connector) {\n    return connector.chains[0].id\n  }\n\n  // -- public web3modal\n  public getConnectorById(id: ConnectorId) {\n    const connector = this.wagmi.connectors.find(item => item.id === id)\n    if (!connector) throw new Error(`Missing ${id} connector`)\n\n    return connector\n  }\n\n  public async getActiveWalletConnectUri() {\n    const connector = this.getConnectorById('walletConnect')\n    const provider = await connector.getProvider()\n\n    return provider.connector.uri\n  }\n\n  public async connectWalletConnect(onUri: (uri: string) => void, selectedChainId?: number) {\n    const connector = this.getConnectorById('walletConnect')\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri(provider.connector.uri)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  }\n\n  public async connectCoinbaseMobile(onUri?: (uri: string) => void, selectedChainId?: number) {\n    const connector = this.getConnectorById('coinbaseWallet')\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri?.(provider.qrUrl)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  }\n\n  public async connectExtension(connectorId: ConnectorId, selectedChainId?: number) {\n    const connector = this.getConnectorById(connectorId)\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  }\n\n  // -- public wagmi\n  public disconnect = disconnect\n\n  public getAccount = getAccount\n\n  public watchAccount = watchAccount\n}\n", "import { InjectedConnector } from '@wagmi/core'\nimport { CoinbaseWalletConnector } from '@wagmi/core/connectors/coinbaseWallet'\nimport { MetaMaskConnector } from '@wagmi/core/connectors/metaMask'\nimport { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport type { ModalConnectorsOpts, WalletConnectProviderOpts } from './types'\n\n// -- constants ------------------------------------------------------- //\nconst NAMESPACE = 'eip155'\n\n// -- providers ------------------------------------------------------- //\nexport function walletConnectProvider({ projectId }: WalletConnectProviderOpts) {\n  return jsonRpcProvider({\n    rpc: rpcChain => ({\n      http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${rpcChain.id}&projectId=${projectId}`\n    })\n  })\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function modalConnectors({ appName, chains }: ModalConnectorsOpts) {\n  return [\n    new WalletConnectConnector({ chains, options: { qrcode: false } }),\n    new InjectedConnector({ chains, options: { shimDisconnect: true } }),\n    new CoinbaseWalletConnector({ chains, options: { appName, headlessMode: true } }),\n    new MetaMaskConnector({\n      chains,\n      options: {\n        shimDisconnect: true,\n        shimChainChangedDisconnect: false,\n        UNSTABLE_shimOnConnectSelectAccount: true\n      }\n    })\n  ]\n}\n"],
  "mappings": "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",
  "names": ["_provider", "import_utils", "_provider", "EthereumClient", "wagmi", "chains", "disconnect", "getAccount", "watchAccount", "connector", "id", "item", "onUri", "selectedChainId", "chainId", "getProviderUri", "resolve", "type", "provider", "data", "connect", "connectorId", "NAMESPACE", "walletConnectProvider", "projectId", "jsonRpcProvider", "rpcChain", "modalConnectors", "appName", "WalletConnectConnector", "InjectedConnector", "CoinbaseWalletConnector", "MetaMaskConnector"]
}
